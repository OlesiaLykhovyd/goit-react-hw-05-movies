{"version":3,"file":"static/js/movie-cast-page.e779ed2e.chunk.js","mappings":"0QAEaA,EAAcC,EAAAA,GAAAA,GAAH,oGAOXC,EAAeD,EAAAA,GAAAA,GAAH,mHAMZE,EAAWF,EAAAA,GAAAA,IAAH,oEAIRG,EAAaH,EAAAA,GAAAA,IAAH,6CAIVI,EAAaJ,EAAAA,GAAAA,IAAH,8DAKVK,EAAkBL,EAAAA,GAAAA,EAAH,8C,SCjBb,SAASM,EAAT,GAA6B,IAATC,EAAQ,EAARA,KACjC,OACE,SAACR,EAAD,UACGQ,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACR,UAACX,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CACEU,IACED,EAAY,0CAC2BA,GACnCE,EAENC,IAAKL,OAGT,UAACN,EAAD,YACE,SAACC,EAAD,4BACA,uBAAIM,KACJ,SAACN,EAAD,2BACA,uBAAIK,SAfWD,QCZZ,SAASO,IACtB,IAAMT,ECAO,WACb,IAAQU,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAiBL,GAASM,MAAK,YAAe,IACtCC,EADqC,EAAXjB,KACXC,KAAI,kBAA4C,CACnEC,GADuB,EAAGA,GAE1BC,UAFuB,EAAOA,UAG9BE,aAHuB,EAAkBA,aAIzCD,KAJuB,EAAgCA,SAMzD,OAAOS,EAAQI,QAEhB,CAACP,IAEGV,EDjBMkB,GAEb,OACE,8BACY,OAATlB,GAAiC,IAAhBA,EAAKmB,QACrB,2DAEA,SAACpB,EAAD,CAAUC,KAAMA,Q,0METxBoB,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,IAAAA,IAAA,mCAAsCC,IADxD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BvB,GAA/B,uFACkBkB,IAAAA,IAAA,gBAAmBlB,EAAnB,oBAAiCmB,IADnD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA4BxB,GAA5B,uFACkBkB,IAAAA,IAAA,gBACZlB,EADY,4BACUmB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BzB,GAA/B,uFACkBkB,IAAAA,IAAA,gBACZlB,EADY,4BACUmB,EADV,oBADlB,cACCE,EADD,yBAIEA,EAASC,MAJX,kEAOA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBT,IAAAA,IAAA,+BACGC,EADH,kBACmBQ,EADnB,YADlB,cACCN,EADD,yBAIEA,EAASC,MAJX,oE","sources":["components/CastList/CastList.styled.js","components/CastList/CastList.jsx","pages/Cast.js","hooks/UseFetchCast.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastingList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  margin: -5px;\n`;\n\nexport const CastListItem = styled.li`\n  max-width: 150px;\n  border: 1px solid skyblue;\n  border-radius: 5px;\n  margin: 10px;\n`;\nexport const ImageBox = styled.div`\n  position: relative;\n  overflow: hidden;\n`;\nexport const ActorImage = styled.img`\n  max-width: 148px;\n`;\n\nexport const ActorsInfo = styled.div`\n  padding: 10px;\n  font-size: 14px;\n`;\n\nexport const ActorsInfoTitle = styled.p`\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport noImage from '../../images/no-image-available.png';\nimport {\n  CastingList,\n  CastListItem,\n  ImageBox,\n  ActorImage,\n  ActorsInfo,\n  ActorsInfoTitle,\n} from './CastList.styled';\n\nexport default function CastList({ cast }) {\n  return (\n    <CastingList>\n      {cast.map(({ id, character, name, profile_path }) => (\n        <CastListItem key={id}>\n          <ImageBox>\n            <ActorImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : noImage\n              }\n              alt={character}\n            />\n          </ImageBox>\n          <ActorsInfo>\n            <ActorsInfoTitle>Actors name:</ActorsInfoTitle>\n            <p>{name}</p>\n            <ActorsInfoTitle>Character: </ActorsInfoTitle>\n            <p>{character}</p>\n          </ActorsInfo>\n        </CastListItem>\n      ))}\n    </CastingList>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import UseFetchCast from 'hooks/UseFetchCast';\nimport CastList from 'components/CastList';\n\nexport default function Cast() {\n  const cast = UseFetchCast();\n\n  return (\n    <>\n      {cast === null || cast.length === 0 ? (\n        <p>There is no cast to this movie</p>\n      ) : (\n        <CastList cast={cast} />\n      )}\n    </>\n  );\n}\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../services/api';\n\nexport default function UseFetchCast() {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    API.getMovieCast(movieId).then(({ cast }) => {\n      const castArr = cast.map(({ id, character, profile_path, name }) => ({\n        id,\n        character,\n        profile_path,\n        name,\n      }));\n      return setCast(castArr);\n    });\n  }, [movieId]);\n\n  return cast;\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst ApiKey = '71232cc02b0a0eb890148f92fc2f7287';\n\nexport async function getTrending() {\n  const response = await axios.get(`trending/all/day?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios.get(`movie/${id}?api_key=${ApiKey}`);\n  return response.data;\n}\n\nexport async function getMovieCast(id) {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${ApiKey}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function getMovieByQuery(query) {\n  const response = await axios.get(\n    `search/movie?api_key=${ApiKey}&query=${query}&page=1`\n  );\n  return response.data;\n}\n"],"names":["CastingList","styled","CastListItem","ImageBox","ActorImage","ActorsInfo","ActorsInfoTitle","CastList","cast","map","id","character","name","profile_path","src","noImage","alt","Cast","movieId","useParams","useState","setCast","useEffect","API","then","castArr","UseFetchCast","length","axios","ApiKey","getTrending","response","data","getMovieDetails","getMovieCast","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}